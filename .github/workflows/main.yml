name: JMeter Load Test

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  jmeter:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: 9135a6c7-13df-4d13-b920-1da66af6b27e
        tenant-id: 6a2e5dc4-b83f-4fe6-9dd5-616bf3f0aa34
        subscription-id: f246b020-dc38-4d48-93ee-e968a8c961dd
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange

    - name: Set Azure Subscription
      run: |
        az account set --subscription f246b020-dc38-4d48-93ee-e968a8c961dd

    - name: Register Microsoft.Insights namespace
      run: |
        az provider register --namespace microsoft.insights

    - name: Wait for namespace registration
      run: |
        while [ $(az provider show --namespace microsoft.insights --query "registrationState" -o tsv) != "Registered" ]; do
          echo "Waiting for microsoft.insights namespace registration..."
          sleep 10
        done

    - name: Create Resource Group
      run: |
        az group create --name myResourceGroup --location eastus

    - name: Create AKS Cluster
      run: |
        az aks create --resource-group myResourceGroup --name myAKSCluster1 --node-count 3 --enable-addons monitoring --generate-ssh-keys

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

    - name: Install Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Create JMeter Master Pod
      run: |
        kubectl run jmeter-master --image=justb4/jmeter --restart=Never --labels=app=jmeter,role=master --env="JAVA_OPTS=-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=false" -- /bin/bash -c "while true; do sleep 1800; done;"

    - name: Create JMeter Slave Pods
      run: |
        for i in {1..3}; do
          kubectl run jmeter-slave-$i --image=justb4/jmeter --restart=Never --labels=app=jmeter,role=slave --env="JAVA_OPTS=-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote=false" -- /bin/bash -c "while true; do sleep 1800; done;"
        done

    - name: Wait for JMeter Master Pod to be Ready
      run: |
        kubectl wait --for=condition=ready pod -l "app=jmeter,role=master" --timeout=300s

    - name: Check JMeter Master Pod Status
      if: failure()
      run: |
        kubectl get pod -l "app=jmeter,role=master" -o wide
        kubectl describe pod -l "app=jmeter,role=master"
        kubectl logs $(kubectl get pods -l "app=jmeter,role=master" -o jsonpath="{.items[0].metadata.name}")

    - name: Wait for JMeter Slave Pods to be Ready
      run: |
        kubectl wait --for=condition=ready pod -l "app=jmeter,role=slave" --timeout=300s

    - name: Check JMeter Slave Pods Status
      if: failure()
      run: |
        kubectl get pod -l "app=jmeter,role=slave" -o wide
        kubectl describe pod -l "app=jmeter,role=slave"
        for pod in $(kubectl get pods -l "app=jmeter,role=slave" -o jsonpath="{.items[*].metadata.name}"); do
          echo "Logs for $pod:"
          kubectl logs $pod;
        done

    - name: Trigger JMeter Test
      run: |
        kubectl exec $(kubectl get pods -l "app=jmeter,role=master" -o jsonpath="{.items[0].metadata.name}") -- /bin/bash /opt/apache-jmeter-5.5/bin/jmeter -n -t /opt/apache-jmeter-5.5/Demo.jmx -R $(kubectl get pods -l "app=jmeter,role=slave" -o jsonpath="{.items[*].status.podIP}" | sed 's/ /,/g')
